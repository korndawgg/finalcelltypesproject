{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VISp and VISpm\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Team Member Names & Contributions\n",
    "\n",
    "\n",
    "- **Yudi Hu**: (PID A13488186)\n",
    "- **Lauren Hui**: (PID A14697567)\n",
    "- **Sunnie Hong**: abstract, background, question, editing code, Cell Types wrangling and analysis, Cell Types graphs, discussion, conclusion (PID A13527409)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Abstract"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Fill in your 3-4 sentence abstract here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Research Question"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Fill in your research question here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Background and Prior Work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Fill in your background and prior work here (~500 words). You are welcome to use additional subheadings. You should also include a paragraph describing each dataset and how you'll be using them.* \n",
    "\n",
    "### References (include links):\n",
    "(1)\n",
    "\n",
    "(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hypothesis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Fill in your hypotheses here*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing packages needed for the code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as mp\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import xarray as xr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing Cell Types Dataset from Allen Brain Institute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>line_name</th>\n",
       "      <th>specimen__id</th>\n",
       "      <th>specimen__name</th>\n",
       "      <th>specimen__hemisphere</th>\n",
       "      <th>structure__id</th>\n",
       "      <th>structure__name</th>\n",
       "      <th>structure__acronym</th>\n",
       "      <th>structure_parent__id</th>\n",
       "      <th>structure_parent__acronym</th>\n",
       "      <th>structure__layer</th>\n",
       "      <th>...</th>\n",
       "      <th>ephys_thumb_path</th>\n",
       "      <th>ephys_inst_thresh_thumb_path</th>\n",
       "      <th>donor__age</th>\n",
       "      <th>donor__sex</th>\n",
       "      <th>donor__disease_state</th>\n",
       "      <th>donor__race</th>\n",
       "      <th>donor__years_of_seizure_history</th>\n",
       "      <th>donor__species</th>\n",
       "      <th>donor__id</th>\n",
       "      <th>donor__name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>525011903</td>\n",
       "      <td>H16.03.003.01.14.02</td>\n",
       "      <td>right</td>\n",
       "      <td>12113</td>\n",
       "      <td>\"frontal lobe\"</td>\n",
       "      <td>FroL</td>\n",
       "      <td>12113</td>\n",
       "      <td>FroL</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/529903140</td>\n",
       "      <td>/api/v2/well_known_file_download/529903142</td>\n",
       "      <td>25 yrs</td>\n",
       "      <td>Male</td>\n",
       "      <td>epilepsy</td>\n",
       "      <td>White or Caucasian</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Homo Sapiens</td>\n",
       "      <td>524848408</td>\n",
       "      <td>H16.03.003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Oxtr-T2A-Cre</td>\n",
       "      <td>565871768</td>\n",
       "      <td>Oxtr-2A-Cre;Ai14-293837.03.01.02</td>\n",
       "      <td>left</td>\n",
       "      <td>778</td>\n",
       "      <td>\"Primary visual area, layer 5\"</td>\n",
       "      <td>VISp5</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/566738214</td>\n",
       "      <td>/api/v2/well_known_file_download/566738219</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>563340157</td>\n",
       "      <td>Oxtr-T2A-Cre;Ai14-293837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pvalb-IRES-Cre</td>\n",
       "      <td>469801138</td>\n",
       "      <td>Pvalb-IRES-Cre;Ai14-170927.05.02.01</td>\n",
       "      <td>right</td>\n",
       "      <td>721</td>\n",
       "      <td>\"Primary visual area, layer 4\"</td>\n",
       "      <td>VISp4</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/487618917</td>\n",
       "      <td>/api/v2/well_known_file_download/491380580</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>319194354</td>\n",
       "      <td>Pvalb-IRES-Cre;Ai14(IVSCC)-170927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>528642047</td>\n",
       "      <td>H16.06.009.01.02.06.05</td>\n",
       "      <td>left</td>\n",
       "      <td>12141</td>\n",
       "      <td>\"middle temporal gyrus\"</td>\n",
       "      <td>MTG</td>\n",
       "      <td>12141</td>\n",
       "      <td>MTG</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/660970973</td>\n",
       "      <td>/api/v2/well_known_file_download/660970975</td>\n",
       "      <td>48 yrs</td>\n",
       "      <td>Female</td>\n",
       "      <td>epilepsy</td>\n",
       "      <td>unknown</td>\n",
       "      <td>33.0</td>\n",
       "      <td>Homo Sapiens</td>\n",
       "      <td>528574320</td>\n",
       "      <td>H16.06.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Slc32a1-T2A-FlpO|Vipr2-IRES2-Cre</td>\n",
       "      <td>605889373</td>\n",
       "      <td>Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-337419.0...</td>\n",
       "      <td>right</td>\n",
       "      <td>821</td>\n",
       "      <td>\"Primary visual area, layer 2/3\"</td>\n",
       "      <td>VISp2/3</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>2/3</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/657612184</td>\n",
       "      <td>/api/v2/well_known_file_download/657612186</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>605622695</td>\n",
       "      <td>Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-337419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2326</th>\n",
       "      <td>Ctgf-T2A-dgCre</td>\n",
       "      <td>512322162</td>\n",
       "      <td>Ctgf-2A-dgCre;Ai14(IVSCC)-240529.03.02.01</td>\n",
       "      <td>right</td>\n",
       "      <td>305</td>\n",
       "      <td>\"Primary visual area, layer 6b\"</td>\n",
       "      <td>VISp6b</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>6b</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/513878612</td>\n",
       "      <td>/api/v2/well_known_file_download/513878614</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>511856495</td>\n",
       "      <td>Ctgf-2A-dgCre;Ai14(IVSCC)-240529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2327</th>\n",
       "      <td>Rorb-IRES2-Cre</td>\n",
       "      <td>488473535</td>\n",
       "      <td>Rorb-IRES2-Cre-D;Ai14-212867.03.01.01</td>\n",
       "      <td>left</td>\n",
       "      <td>821</td>\n",
       "      <td>\"Primary visual area, layer 2/3\"</td>\n",
       "      <td>VISp2/3</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>2/3</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/488474970</td>\n",
       "      <td>/api/v2/well_known_file_download/491376689</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>487607572</td>\n",
       "      <td>Rorb-IRES2-Cre-D;Ai14-212867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2328</th>\n",
       "      <td>Rorb-IRES2-Cre</td>\n",
       "      <td>467003163</td>\n",
       "      <td>Rorb-IRES2-Cre-D;Ai14-172652.02.02.01</td>\n",
       "      <td>right</td>\n",
       "      <td>721</td>\n",
       "      <td>\"Primary visual area, layer 4\"</td>\n",
       "      <td>VISp4</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/487623212</td>\n",
       "      <td>/api/v2/well_known_file_download/491378303</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>322489498</td>\n",
       "      <td>Rorb-IRES2-Cre-D;Ai14(IVSCC)-172652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2329</th>\n",
       "      <td>Pvalb-IRES-Cre</td>\n",
       "      <td>572609946</td>\n",
       "      <td>Pvalb-IRES-Cre;Ai14-301945.04.02.01</td>\n",
       "      <td>right</td>\n",
       "      <td>721</td>\n",
       "      <td>\"Primary visual area, layer 4\"</td>\n",
       "      <td>VISp4</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/575795570</td>\n",
       "      <td>/api/v2/well_known_file_download/575795572</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>570930952</td>\n",
       "      <td>Pvalb-IRES-Cre;Ai14-301945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2330</th>\n",
       "      <td>Sst-IRES-Cre</td>\n",
       "      <td>464212183</td>\n",
       "      <td>Sst-IRES-Cre;Ai14-165865.05.02.01</td>\n",
       "      <td>left</td>\n",
       "      <td>778</td>\n",
       "      <td>\"Primary visual area, layer 5\"</td>\n",
       "      <td>VISp5</td>\n",
       "      <td>385</td>\n",
       "      <td>VISp</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>/api/v2/well_known_file_download/487630084</td>\n",
       "      <td>/api/v2/well_known_file_download/491377895</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mus musculus</td>\n",
       "      <td>312883165</td>\n",
       "      <td>Sst-IRES-Cre;Ai14(IVSCC)-165865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2331 rows × 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             line_name  specimen__id  \\\n",
       "0                                  NaN     525011903   \n",
       "1                         Oxtr-T2A-Cre     565871768   \n",
       "2                       Pvalb-IRES-Cre     469801138   \n",
       "3                                  NaN     528642047   \n",
       "4     Slc32a1-T2A-FlpO|Vipr2-IRES2-Cre     605889373   \n",
       "...                                ...           ...   \n",
       "2326                    Ctgf-T2A-dgCre     512322162   \n",
       "2327                    Rorb-IRES2-Cre     488473535   \n",
       "2328                    Rorb-IRES2-Cre     467003163   \n",
       "2329                    Pvalb-IRES-Cre     572609946   \n",
       "2330                      Sst-IRES-Cre     464212183   \n",
       "\n",
       "                                         specimen__name specimen__hemisphere  \\\n",
       "0                                   H16.03.003.01.14.02                right   \n",
       "1                      Oxtr-2A-Cre;Ai14-293837.03.01.02                 left   \n",
       "2                   Pvalb-IRES-Cre;Ai14-170927.05.02.01                right   \n",
       "3                                H16.06.009.01.02.06.05                 left   \n",
       "4     Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-337419.0...                right   \n",
       "...                                                 ...                  ...   \n",
       "2326          Ctgf-2A-dgCre;Ai14(IVSCC)-240529.03.02.01                right   \n",
       "2327              Rorb-IRES2-Cre-D;Ai14-212867.03.01.01                 left   \n",
       "2328              Rorb-IRES2-Cre-D;Ai14-172652.02.02.01                right   \n",
       "2329                Pvalb-IRES-Cre;Ai14-301945.04.02.01                right   \n",
       "2330                  Sst-IRES-Cre;Ai14-165865.05.02.01                 left   \n",
       "\n",
       "      structure__id                   structure__name structure__acronym  \\\n",
       "0             12113                    \"frontal lobe\"               FroL   \n",
       "1               778    \"Primary visual area, layer 5\"              VISp5   \n",
       "2               721    \"Primary visual area, layer 4\"              VISp4   \n",
       "3             12141           \"middle temporal gyrus\"                MTG   \n",
       "4               821  \"Primary visual area, layer 2/3\"            VISp2/3   \n",
       "...             ...                               ...                ...   \n",
       "2326            305   \"Primary visual area, layer 6b\"             VISp6b   \n",
       "2327            821  \"Primary visual area, layer 2/3\"            VISp2/3   \n",
       "2328            721    \"Primary visual area, layer 4\"              VISp4   \n",
       "2329            721    \"Primary visual area, layer 4\"              VISp4   \n",
       "2330            778    \"Primary visual area, layer 5\"              VISp5   \n",
       "\n",
       "      structure_parent__id structure_parent__acronym structure__layer  ...  \\\n",
       "0                    12113                      FroL                3  ...   \n",
       "1                      385                      VISp                5  ...   \n",
       "2                      385                      VISp                4  ...   \n",
       "3                    12141                       MTG                5  ...   \n",
       "4                      385                      VISp              2/3  ...   \n",
       "...                    ...                       ...              ...  ...   \n",
       "2326                   385                      VISp               6b  ...   \n",
       "2327                   385                      VISp              2/3  ...   \n",
       "2328                   385                      VISp                4  ...   \n",
       "2329                   385                      VISp                4  ...   \n",
       "2330                   385                      VISp                5  ...   \n",
       "\n",
       "                                ephys_thumb_path  \\\n",
       "0     /api/v2/well_known_file_download/529903140   \n",
       "1     /api/v2/well_known_file_download/566738214   \n",
       "2     /api/v2/well_known_file_download/487618917   \n",
       "3     /api/v2/well_known_file_download/660970973   \n",
       "4     /api/v2/well_known_file_download/657612184   \n",
       "...                                          ...   \n",
       "2326  /api/v2/well_known_file_download/513878612   \n",
       "2327  /api/v2/well_known_file_download/488474970   \n",
       "2328  /api/v2/well_known_file_download/487623212   \n",
       "2329  /api/v2/well_known_file_download/575795570   \n",
       "2330  /api/v2/well_known_file_download/487630084   \n",
       "\n",
       "                    ephys_inst_thresh_thumb_path  donor__age  donor__sex  \\\n",
       "0     /api/v2/well_known_file_download/529903142      25 yrs        Male   \n",
       "1     /api/v2/well_known_file_download/566738219         NaN         NaN   \n",
       "2     /api/v2/well_known_file_download/491380580         NaN         NaN   \n",
       "3     /api/v2/well_known_file_download/660970975      48 yrs      Female   \n",
       "4     /api/v2/well_known_file_download/657612186         NaN         NaN   \n",
       "...                                          ...         ...         ...   \n",
       "2326  /api/v2/well_known_file_download/513878614         NaN         NaN   \n",
       "2327  /api/v2/well_known_file_download/491376689         NaN         NaN   \n",
       "2328  /api/v2/well_known_file_download/491378303         NaN         NaN   \n",
       "2329  /api/v2/well_known_file_download/575795572         NaN         NaN   \n",
       "2330  /api/v2/well_known_file_download/491377895         NaN         NaN   \n",
       "\n",
       "      donor__disease_state         donor__race  \\\n",
       "0                 epilepsy  White or Caucasian   \n",
       "1                      NaN                 NaN   \n",
       "2                      NaN                 NaN   \n",
       "3                 epilepsy             unknown   \n",
       "4                      NaN                 NaN   \n",
       "...                    ...                 ...   \n",
       "2326                   NaN                 NaN   \n",
       "2327                   NaN                 NaN   \n",
       "2328                   NaN                 NaN   \n",
       "2329                   NaN                 NaN   \n",
       "2330                   NaN                 NaN   \n",
       "\n",
       "      donor__years_of_seizure_history  donor__species  donor__id  \\\n",
       "0                                 9.0    Homo Sapiens  524848408   \n",
       "1                                 NaN    Mus musculus  563340157   \n",
       "2                                 NaN    Mus musculus  319194354   \n",
       "3                                33.0    Homo Sapiens  528574320   \n",
       "4                                 NaN    Mus musculus  605622695   \n",
       "...                               ...             ...        ...   \n",
       "2326                              NaN    Mus musculus  511856495   \n",
       "2327                              NaN    Mus musculus  487607572   \n",
       "2328                              NaN    Mus musculus  322489498   \n",
       "2329                              NaN    Mus musculus  570930952   \n",
       "2330                              NaN    Mus musculus  312883165   \n",
       "\n",
       "                                       donor__name  \n",
       "0                                       H16.03.003  \n",
       "1                         Oxtr-T2A-Cre;Ai14-293837  \n",
       "2                Pvalb-IRES-Cre;Ai14(IVSCC)-170927  \n",
       "3                                       H16.06.009  \n",
       "4     Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-337419  \n",
       "...                                            ...  \n",
       "2326              Ctgf-2A-dgCre;Ai14(IVSCC)-240529  \n",
       "2327                  Rorb-IRES2-Cre-D;Ai14-212867  \n",
       "2328           Rorb-IRES2-Cre-D;Ai14(IVSCC)-172652  \n",
       "2329                    Pvalb-IRES-Cre;Ai14-301945  \n",
       "2330               Sst-IRES-Cre;Ai14(IVSCC)-165865  \n",
       "\n",
       "[2331 rows x 54 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cell_type_df = pd.read_csv('cell_types_specimen_details.csv')\n",
    "cell_type_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing the Neuropixels Cache. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from allensdk.brain_observatory.ecephys.ecephys_project_cache import EcephysProjectCache\n",
    "manifest_path = '/datasets/allen-brain-observatory/visual-coding-neuropixels/ecephys-cache/manifest.json' "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Wrangling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the Cell Types database: creating a separate dataframe for VISp and VISpm data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          line_name  specimen__id  \\\n",
      "0                      Oxtr-T2A-Cre     565871768   \n",
      "1                    Pvalb-IRES-Cre     469801138   \n",
      "2  Slc32a1-T2A-FlpO|Vipr2-IRES2-Cre     605889373   \n",
      "3                      Cux2-CreERT2     485909730   \n",
      "4                    Scnn1a-Tg3-Cre     323865917   \n",
      "\n",
      "                                      specimen__name specimen__hemisphere  \\\n",
      "0                   Oxtr-2A-Cre;Ai14-293837.03.01.02                 left   \n",
      "1                Pvalb-IRES-Cre;Ai14-170927.05.02.01                right   \n",
      "2  Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-337419.0...                right   \n",
      "3                  Cux2-CreERT2;Ai14-205530.03.02.01                right   \n",
      "4                Scnn1a-Tg3-Cre;Ai14-172530.06.01.01                 left   \n",
      "\n",
      "   structure__id                   structure__name structure__acronym  \\\n",
      "0            778    \"Primary visual area, layer 5\"              VISp5   \n",
      "1            721    \"Primary visual area, layer 4\"              VISp4   \n",
      "2            821  \"Primary visual area, layer 2/3\"            VISp2/3   \n",
      "3            778    \"Primary visual area, layer 5\"              VISp5   \n",
      "4            778    \"Primary visual area, layer 5\"              VISp5   \n",
      "\n",
      "   structure_parent__id structure_parent__acronym structure__layer  ...  \\\n",
      "0                   385                      VISp                5  ...   \n",
      "1                   385                      VISp                4  ...   \n",
      "2                   385                      VISp              2/3  ...   \n",
      "3                   385                      VISp                5  ...   \n",
      "4                   385                      VISp                5  ...   \n",
      "\n",
      "                             ephys_thumb_path  \\\n",
      "0  /api/v2/well_known_file_download/566738214   \n",
      "1  /api/v2/well_known_file_download/487618917   \n",
      "2  /api/v2/well_known_file_download/657612184   \n",
      "3  /api/v2/well_known_file_download/485911650   \n",
      "4  /api/v2/well_known_file_download/487629671   \n",
      "\n",
      "                 ephys_inst_thresh_thumb_path  donor__age  donor__sex  \\\n",
      "0  /api/v2/well_known_file_download/566738219           0           0   \n",
      "1  /api/v2/well_known_file_download/491380580           0           0   \n",
      "2  /api/v2/well_known_file_download/657612186           0           0   \n",
      "3  /api/v2/well_known_file_download/491381130           0           0   \n",
      "4  /api/v2/well_known_file_download/491384430           0           0   \n",
      "\n",
      "   donor__disease_state donor__race  donor__years_of_seizure_history  \\\n",
      "0                     0           0                              0.0   \n",
      "1                     0           0                              0.0   \n",
      "2                     0           0                              0.0   \n",
      "3                     0           0                              0.0   \n",
      "4                     0           0                              0.0   \n",
      "\n",
      "   donor__species  donor__id                                   donor__name  \n",
      "0    Mus musculus  563340157                      Oxtr-T2A-Cre;Ai14-293837  \n",
      "1    Mus musculus  319194354             Pvalb-IRES-Cre;Ai14(IVSCC)-170927  \n",
      "2    Mus musculus  605622695  Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-337419  \n",
      "3    Mus musculus  485250100                      Cux2-CreERT2;Ai14-205530  \n",
      "4    Mus musculus  322489588               Scnn1a-Tg3-Cre;Ai14(GSL)-172530  \n",
      "\n",
      "[5 rows x 54 columns]\n",
      "                          line_name  specimen__id  \\\n",
      "0  Slc32a1-T2A-FlpO|Vipr2-IRES2-Cre     585805211   \n",
      "1  Slc32a1-T2A-FlpO|Vipr2-IRES2-Cre     586073850   \n",
      "2                  Ndnf-IRES2-dgCre     565120091   \n",
      "3                   Vipr2-IRES2-Cre     590558808   \n",
      "4                    Scnn1a-Tg3-Cre     466827702   \n",
      "\n",
      "                                      specimen__name specimen__hemisphere  \\\n",
      "0  Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-315067.0...                 left   \n",
      "1  Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-315072.0...                 left   \n",
      "2              Ndnf-IRES2-dgCre;Ai14-292670.04.02.01                right   \n",
      "3               Vipr2-IRES2-Cre;Ai14-316908.04.02.01                right   \n",
      "4                Scnn1a-Tg3-Cre;Ai14-180211.05.01.01                 left   \n",
      "\n",
      "   structure__id                         structure__name structure__acronym  \\\n",
      "0             41  \"posteromedial visual area, layer 2/3\"           VISpm2/3   \n",
      "1             41  \"posteromedial visual area, layer 2/3\"           VISpm2/3   \n",
      "2            501    \"posteromedial visual area, layer 4\"             VISpm4   \n",
      "3            469   \"posteromedial visual area, layer 6b\"            VISpm6b   \n",
      "4            565    \"posteromedial visual area, layer 5\"             VISpm5   \n",
      "\n",
      "   structure_parent__id structure_parent__acronym structure__layer  ...  \\\n",
      "0                   533                     VISpm              2/3  ...   \n",
      "1                   533                     VISpm              2/3  ...   \n",
      "2                   533                     VISpm                4  ...   \n",
      "3                   533                     VISpm               6b  ...   \n",
      "4                   533                     VISpm                5  ...   \n",
      "\n",
      "                             ephys_thumb_path  \\\n",
      "0  /api/v2/well_known_file_download/606111374   \n",
      "1  /api/v2/well_known_file_download/606111617   \n",
      "2  /api/v2/well_known_file_download/566724383   \n",
      "3  /api/v2/well_known_file_download/606112029   \n",
      "4  /api/v2/well_known_file_download/487628699   \n",
      "\n",
      "                 ephys_inst_thresh_thumb_path  donor__age  donor__sex  \\\n",
      "0  /api/v2/well_known_file_download/606111379           0           0   \n",
      "1  /api/v2/well_known_file_download/606111619           0           0   \n",
      "2  /api/v2/well_known_file_download/566724388           0           0   \n",
      "3  /api/v2/well_known_file_download/606112031           0           0   \n",
      "4  /api/v2/well_known_file_download/491376465           0           0   \n",
      "\n",
      "   donor__disease_state donor__race  donor__years_of_seizure_history  \\\n",
      "0                     0           0                              0.0   \n",
      "1                     0           0                              0.0   \n",
      "2                     0           0                              0.0   \n",
      "3                     0           0                              0.0   \n",
      "4                     0           0                              0.0   \n",
      "\n",
      "   donor__species  donor__id                                   donor__name  \n",
      "0    Mus musculus  584627997  Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-315067  \n",
      "1    Mus musculus  584628021  Vipr2-IRES2-Cre;Slc32a1-T2A-FlpO;Ai65-315072  \n",
      "2    Mus musculus  563340185                  Ndnf-IRES2-dgCre;Ai14-292670  \n",
      "3    Mus musculus  586420039                   Vipr2-IRES2-Cre;Ai14-316908  \n",
      "4    Mus musculus  418778062             Scnn1a-Tg3-Cre;Ai14(IVSCC)-180211  \n",
      "\n",
      "[5 rows x 54 columns]\n"
     ]
    }
   ],
   "source": [
    "cell_type_VISp = cell_type_df[cell_type_df['structure_parent__acronym'].str.contains('VISp')].reset_index(drop=True).fillna(0)\n",
    "cell_type_VISpm = cell_type_df[cell_type_df['structure_parent__acronym'].str.contains('VISpm')].reset_index(drop=True).fillna(0)\n",
    "print(cell_type_VISp.head())\n",
    "print(cell_type_VISpm.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From these datasets, making another dataframe specifically including average firing rate, peak to ramp, adaptation index, and time constant from VISp and VISpm data respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ef__avg_firing_rate  ef__peak_t_ramp    ef__tau  ef__adaptation  \\\n",
      "0             0.000000        14.737200  11.291090        0.000000   \n",
      "1            79.952029        11.763022   4.121689        0.000643   \n",
      "2            12.666099         8.423400   5.166574       -0.015098   \n",
      "3            17.890688         2.851312  20.567767        0.032340   \n",
      "4            10.611937         3.421542  23.182755        0.026732   \n",
      "\n",
      "  structure_parent__acronym  \n",
      "0                      VISp  \n",
      "1                      VISp  \n",
      "2                      VISp  \n",
      "3                      VISp  \n",
      "4                      VISp  \n",
      "   ef__avg_firing_rate  ef__peak_t_ramp    ef__tau  ef__adaptation  \\\n",
      "0            39.570967         9.657793   7.296395        0.012464   \n",
      "1            41.345379         8.521987   6.825851        0.010213   \n",
      "2            21.317416         3.257533  25.230889        0.033795   \n",
      "3            73.053430        11.424590   6.992904        0.001740   \n",
      "4            16.740791         3.190572  19.412868        0.027348   \n",
      "\n",
      "  structure_parent__acronym  \n",
      "0                     VISpm  \n",
      "1                     VISpm  \n",
      "2                     VISpm  \n",
      "3                     VISpm  \n",
      "4                     VISpm  \n"
     ]
    }
   ],
   "source": [
    "visp_features = cell_type_VISp[['ef__avg_firing_rate','ef__peak_t_ramp','ef__tau', 'ef__adaptation', 'structure_parent__acronym']]\n",
    "vispm_features = cell_type_VISpm[['ef__avg_firing_rate','ef__peak_t_ramp','ef__tau', 'ef__adaptation', 'structure_parent__acronym']]\n",
    "print(visp_features.head())\n",
    "print(vispm_features.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The VISp dataset contains VISpl, VISp, VISpm, and VISpor. Every row of data that contains VISpl, pm, and por must be deleted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['VISp']\n"
     ]
    }
   ],
   "source": [
    "visp_features = visp_features[visp_features['structure_parent__acronym']!= 'VISpl']\n",
    "visp_features = visp_features[visp_features['structure_parent__acronym']!= 'VISpm']\n",
    "visp_features = visp_features[visp_features['structure_parent__acronym']!= 'VISpor']\n",
    "\n",
    "#to make sure that they are removed:\n",
    "print(visp_features.structure_parent__acronym.unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The two VISp and VISpm datasets can now be combined for later analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ef__avg_firing_rate  ef__peak_t_ramp    ef__tau  ef__adaptation  \\\n",
      "0             0.000000        14.737200  11.291090        0.000000   \n",
      "1            79.952029        11.763022   4.121689        0.000643   \n",
      "2            12.666099         8.423400   5.166574       -0.015098   \n",
      "3            17.890688         2.851312  20.567767        0.032340   \n",
      "4            10.611937         3.421542  23.182755        0.026732   \n",
      "\n",
      "  structure_parent__acronym  \n",
      "0                      VISp  \n",
      "1                      VISp  \n",
      "2                      VISp  \n",
      "3                      VISp  \n",
      "4                      VISp  \n"
     ]
    }
   ],
   "source": [
    "visp_and_m_features = pd.concat([visp_features, vispm_features],axis = 0)\n",
    "print(visp_and_m_features.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another dataset must be made for Cell Types VISp and VISpm data with only firing rate and structure acronym, to be used for analysis between both datasets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   firing_rate ecephys_structure_acronym\n",
      "0     0.000000                      VISp\n",
      "1    79.952029                      VISp\n",
      "2    12.666099                      VISp\n",
      "3    17.890688                      VISp\n",
      "4    10.611937                      VISp\n"
     ]
    }
   ],
   "source": [
    "cell_p = cell_type_VISp[['ef__avg_firing_rate']].fillna(0)\n",
    "cell_p['firing_rate'] = cell_p['ef__avg_firing_rate']\n",
    "cell_p = cell_p.drop(['ef__avg_firing_rate'],axis=1)\n",
    "cell_p['ecephys_structure_acronym'] = cell_type_VISp['structure_parent__acronym']\n",
    "print(cell_p.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This dataset contains data from VISpm, VISpor, and VISpl neurons, which must be deleted so that only VISp data remains."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['VISp']\n"
     ]
    }
   ],
   "source": [
    "cell_p = cell_p[cell_p['ecephys_structure_acronym']!= 'VISpl']\n",
    "cell_p = cell_p[cell_p['ecephys_structure_acronym']!= 'VISpm']\n",
    "cell_p = cell_p[cell_p['ecephys_structure_acronym']!= 'VISpor']\n",
    "print(cell_p.ecephys_structure_acronym.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   firing_rate ecephys_structure_acronym\n",
      "0    39.570967                     VISpm\n",
      "1    41.345379                     VISpm\n",
      "2    21.317416                     VISpm\n",
      "3    73.053430                     VISpm\n",
      "4    16.740791                     VISpm\n"
     ]
    }
   ],
   "source": [
    "cell_pm = cell_type_VISpm[['ef__avg_firing_rate']].fillna(0)\n",
    "cell_pm['firing_rate'] = cell_pm['ef__avg_firing_rate']\n",
    "cell_pm = cell_pm.drop(['ef__avg_firing_rate'],axis=1)\n",
    "cell_pm['ecephys_structure_acronym'] = cell_type_VISpm['structure_parent__acronym']\n",
    "print(cell_pm.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating an EphysProjectCache object for the Neuropixels data and retrieving all sessions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of sessions: 58\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>published_at</th>\n",
       "      <th>specimen_id</th>\n",
       "      <th>session_type</th>\n",
       "      <th>age_in_days</th>\n",
       "      <th>sex</th>\n",
       "      <th>full_genotype</th>\n",
       "      <th>unit_count</th>\n",
       "      <th>channel_count</th>\n",
       "      <th>probe_count</th>\n",
       "      <th>ecephys_structure_acronyms</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>715093703</th>\n",
       "      <td>2019-10-03T00:00:00Z</td>\n",
       "      <td>699733581</td>\n",
       "      <td>brain_observatory_1.1</td>\n",
       "      <td>118.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt</td>\n",
       "      <td>884</td>\n",
       "      <td>2219</td>\n",
       "      <td>6</td>\n",
       "      <td>[CA1, VISrl, nan, PO, LP, LGd, CA3, DG, VISl, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>719161530</th>\n",
       "      <td>2019-10-03T00:00:00Z</td>\n",
       "      <td>703279284</td>\n",
       "      <td>brain_observatory_1.1</td>\n",
       "      <td>122.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt</td>\n",
       "      <td>755</td>\n",
       "      <td>2214</td>\n",
       "      <td>6</td>\n",
       "      <td>[TH, Eth, APN, POL, LP, DG, CA1, VISpm, nan, N...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>721123822</th>\n",
       "      <td>2019-10-03T00:00:00Z</td>\n",
       "      <td>707296982</td>\n",
       "      <td>brain_observatory_1.1</td>\n",
       "      <td>125.0</td>\n",
       "      <td>M</td>\n",
       "      <td>Pvalb-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt</td>\n",
       "      <td>444</td>\n",
       "      <td>2229</td>\n",
       "      <td>6</td>\n",
       "      <td>[MB, SCig, PPT, NOT, DG, CA1, VISam, nan, LP, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>732592105</th>\n",
       "      <td>2019-10-03T00:00:00Z</td>\n",
       "      <td>717038288</td>\n",
       "      <td>brain_observatory_1.1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>M</td>\n",
       "      <td>wt/wt</td>\n",
       "      <td>824</td>\n",
       "      <td>1847</td>\n",
       "      <td>5</td>\n",
       "      <td>[grey, VISpm, nan, VISp, VISl, VISal, VISrl]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>737581020</th>\n",
       "      <td>2019-10-03T00:00:00Z</td>\n",
       "      <td>718643567</td>\n",
       "      <td>brain_observatory_1.1</td>\n",
       "      <td>108.0</td>\n",
       "      <td>M</td>\n",
       "      <td>wt/wt</td>\n",
       "      <td>568</td>\n",
       "      <td>2218</td>\n",
       "      <td>6</td>\n",
       "      <td>[grey, VISmma, nan, VISpm, VISp, VISl, VISrl]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   published_at  specimen_id           session_type  \\\n",
       "id                                                                    \n",
       "715093703  2019-10-03T00:00:00Z    699733581  brain_observatory_1.1   \n",
       "719161530  2019-10-03T00:00:00Z    703279284  brain_observatory_1.1   \n",
       "721123822  2019-10-03T00:00:00Z    707296982  brain_observatory_1.1   \n",
       "732592105  2019-10-03T00:00:00Z    717038288  brain_observatory_1.1   \n",
       "737581020  2019-10-03T00:00:00Z    718643567  brain_observatory_1.1   \n",
       "\n",
       "           age_in_days sex                                    full_genotype  \\\n",
       "id                                                                            \n",
       "715093703        118.0   M    Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt   \n",
       "719161530        122.0   M    Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt   \n",
       "721123822        125.0   M  Pvalb-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt   \n",
       "732592105        100.0   M                                            wt/wt   \n",
       "737581020        108.0   M                                            wt/wt   \n",
       "\n",
       "           unit_count  channel_count  probe_count  \\\n",
       "id                                                  \n",
       "715093703         884           2219            6   \n",
       "719161530         755           2214            6   \n",
       "721123822         444           2229            6   \n",
       "732592105         824           1847            5   \n",
       "737581020         568           2218            6   \n",
       "\n",
       "                                  ecephys_structure_acronyms  \n",
       "id                                                            \n",
       "715093703  [CA1, VISrl, nan, PO, LP, LGd, CA3, DG, VISl, ...  \n",
       "719161530  [TH, Eth, APN, POL, LP, DG, CA1, VISpm, nan, N...  \n",
       "721123822  [MB, SCig, PPT, NOT, DG, CA1, VISam, nan, LP, ...  \n",
       "732592105       [grey, VISpm, nan, VISp, VISl, VISal, VISrl]  \n",
       "737581020      [grey, VISmma, nan, VISpm, VISp, VISl, VISrl]  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cache = EcephysProjectCache.fixed(manifest=manifest_path)\n",
    "sessions = cache.get_session_table()\n",
    "print('Total number of sessions: ' + str(len(sessions)))\n",
    "sessions.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are looking at experiments performed on a specific genotype Pvalb (Parvalbumin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "pvalb_sessions = sessions[sessions.full_genotype.str.match('Pvalb')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We select one of the above sessions to extract information about the optotagging stimuli that were delivered. We use session.optogenetic_stimulation_epochs to load a DataFrame that contains the information about the optotagging stimuli."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_time</th>\n",
       "      <th>stop_time</th>\n",
       "      <th>condition</th>\n",
       "      <th>level</th>\n",
       "      <th>name</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9224.96415</td>\n",
       "      <td>9224.97415</td>\n",
       "      <td>a single square pulse</td>\n",
       "      <td>2.5</td>\n",
       "      <td>pulse</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9226.92424</td>\n",
       "      <td>9226.93424</td>\n",
       "      <td>a single square pulse</td>\n",
       "      <td>1.0</td>\n",
       "      <td>pulse</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9229.04429</td>\n",
       "      <td>9230.04429</td>\n",
       "      <td>half-period of a cosine wave</td>\n",
       "      <td>2.5</td>\n",
       "      <td>raised_cosine</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9231.02438</td>\n",
       "      <td>9232.02438</td>\n",
       "      <td>half-period of a cosine wave</td>\n",
       "      <td>1.0</td>\n",
       "      <td>raised_cosine</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9233.01461</td>\n",
       "      <td>9233.02461</td>\n",
       "      <td>a single square pulse</td>\n",
       "      <td>2.5</td>\n",
       "      <td>pulse</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>9566.77201</td>\n",
       "      <td>9567.77201</td>\n",
       "      <td>2.5 ms pulses at 10 Hz</td>\n",
       "      <td>1.0</td>\n",
       "      <td>fast_pulses</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>9568.91215</td>\n",
       "      <td>9569.91215</td>\n",
       "      <td>2.5 ms pulses at 10 Hz</td>\n",
       "      <td>2.5</td>\n",
       "      <td>fast_pulses</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>9570.83222</td>\n",
       "      <td>9571.83222</td>\n",
       "      <td>half-period of a cosine wave</td>\n",
       "      <td>1.0</td>\n",
       "      <td>raised_cosine</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>9572.76227</td>\n",
       "      <td>9572.76727</td>\n",
       "      <td>a single square pulse</td>\n",
       "      <td>1.0</td>\n",
       "      <td>pulse</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>9574.60245</td>\n",
       "      <td>9575.60245</td>\n",
       "      <td>2.5 ms pulses at 10 Hz</td>\n",
       "      <td>1.0</td>\n",
       "      <td>fast_pulses</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     start_time   stop_time                     condition  level  \\\n",
       "id                                                                 \n",
       "0    9224.96415  9224.97415         a single square pulse    2.5   \n",
       "1    9226.92424  9226.93424         a single square pulse    1.0   \n",
       "2    9229.04429  9230.04429  half-period of a cosine wave    2.5   \n",
       "3    9231.02438  9232.02438  half-period of a cosine wave    1.0   \n",
       "4    9233.01461  9233.02461         a single square pulse    2.5   \n",
       "..          ...         ...                           ...    ...   \n",
       "175  9566.77201  9567.77201        2.5 ms pulses at 10 Hz    1.0   \n",
       "176  9568.91215  9569.91215        2.5 ms pulses at 10 Hz    2.5   \n",
       "177  9570.83222  9571.83222  half-period of a cosine wave    1.0   \n",
       "178  9572.76227  9572.76727         a single square pulse    1.0   \n",
       "179  9574.60245  9575.60245        2.5 ms pulses at 10 Hz    1.0   \n",
       "\n",
       "              name  duration  \n",
       "id                            \n",
       "0            pulse     0.010  \n",
       "1            pulse     0.010  \n",
       "2    raised_cosine     1.000  \n",
       "3    raised_cosine     1.000  \n",
       "4            pulse     0.010  \n",
       "..             ...       ...  \n",
       "175    fast_pulses     1.000  \n",
       "176    fast_pulses     1.000  \n",
       "177  raised_cosine     1.000  \n",
       "178          pulse     0.005  \n",
       "179    fast_pulses     1.000  \n",
       "\n",
       "[180 rows x 6 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "session = cache.get_session_data(pvalb_sessions.index.values[2])\n",
    "session.optogenetic_stimulation_epochs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under the stimulus condition of 10ms pulses, we align spikes in VISp to the start of each light pulse so that we can the average firing rate for each unit in VISp as a function of time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "trials = session.optogenetic_stimulation_epochs[(session.optogenetic_stimulation_epochs.duration > 0.009) & \\\n",
    "                                                (session.optogenetic_stimulation_epochs.duration < 0.02)]\n",
    "units1 = session.units[session.units.ecephys_structure_acronym.str.match('VISp')]\n",
    "\n",
    "units = units1[units1['ecephys_structure_acronym']=='VISp']\n",
    "units\n",
    "\n",
    "time_resolution = 0.0005 # 0.5 ms bins\n",
    "\n",
    "bin_edges = np.arange(-0.01, 0.025, time_resolution)\n",
    "\n",
    "def optotagging_spike_counts(bin_edges, trials, units):\n",
    "    \n",
    "    time_resolution = np.mean(np.diff(bin_edges))\n",
    "\n",
    "    spike_matrix = np.zeros( (len(trials), len(bin_edges), len(units)) )\n",
    "\n",
    "    for unit_idx, unit_id in enumerate(units.index.values):\n",
    "\n",
    "        spike_times = session.spike_times[unit_id]\n",
    "\n",
    "        for trial_idx, trial_start in enumerate(trials.start_time.values):\n",
    "\n",
    "            in_range = (spike_times > (trial_start + bin_edges[0])) * \\\n",
    "                       (spike_times < (trial_start + bin_edges[-1]))\n",
    "\n",
    "            binned_times = ((spike_times[in_range] - (trial_start + bin_edges[0])) / time_resolution).astype('int')\n",
    "            spike_matrix[trial_idx, binned_times, unit_idx] = 1\n",
    "\n",
    "    return xr.DataArray(\n",
    "        name='spike_counts',\n",
    "        data=spike_matrix,\n",
    "        coords={\n",
    "            'trial_id': trials.index.values,\n",
    "            'time_relative_to_stimulus_onset': bin_edges,\n",
    "            'unit_id': units.index.values\n",
    "        },\n",
    "        dims=['trial_id', 'time_relative_to_stimulus_onset', 'unit_id']\n",
    "    )\n",
    "\n",
    "da_visp = optotagging_spike_counts(bin_edges, trials, units)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting units in VISp that increase their firing rate during the 10 ms pulse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "baseline_visp = da_visp.sel(time_relative_to_stimulus_onset=slice(-0.01,-0.002))\n",
    "\n",
    "baseline_rate_visp = baseline_visp.sum(dim='time_relative_to_stimulus_onset').mean(dim='trial_id') / 0.008\n",
    "\n",
    "evoked_visp = da_visp.sel(time_relative_to_stimulus_onset=slice(0.001,0.009))\n",
    "\n",
    "evoked_rate_visp = evoked_visp.sum(dim='time_relative_to_stimulus_onset').mean(dim='trial_id') / 0.008"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting a threshold: 2x increase in firing rate to find PV+ insterneurons in VISp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([951851862, 951851916, 951851994, 951852233, 951852493, 951852577])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cre_pos_units_visp = da_visp.unit_id[(evoked_rate_visp / (baseline_rate_visp + 1)) > 2].values\n",
    "\n",
    "cre_pos_units_visp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Adding a cell_type column to the VISp units dataset and assigning \"PV+\" or \"PV-\"to each VISp units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>waveform_duration</th>\n",
       "      <th>firing_rate</th>\n",
       "      <th>waveform_PT_ratio</th>\n",
       "      <th>d_prime</th>\n",
       "      <th>waveform_recovery_slope</th>\n",
       "      <th>waveform_velocity_below</th>\n",
       "      <th>presence_ratio</th>\n",
       "      <th>L_ratio</th>\n",
       "      <th>waveform_amplitude</th>\n",
       "      <th>max_drift</th>\n",
       "      <th>...</th>\n",
       "      <th>ecephys_structure_acronym</th>\n",
       "      <th>anterior_posterior_ccf_coordinate</th>\n",
       "      <th>dorsal_ventral_ccf_coordinate</th>\n",
       "      <th>left_right_ccf_coordinate</th>\n",
       "      <th>probe_description</th>\n",
       "      <th>location</th>\n",
       "      <th>probe_sampling_rate</th>\n",
       "      <th>probe_lfp_sampling_rate</th>\n",
       "      <th>probe_has_lfp_data</th>\n",
       "      <th>cell_type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>951842332</th>\n",
       "      <td>0.315913</td>\n",
       "      <td>18.898412</td>\n",
       "      <td>0.790630</td>\n",
       "      <td>6.522781</td>\n",
       "      <td>-0.084343</td>\n",
       "      <td>0.392438</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.003595</td>\n",
       "      <td>98.587320</td>\n",
       "      <td>50.87</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>7467</td>\n",
       "      <td>1300</td>\n",
       "      <td>7737</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.916411</td>\n",
       "      <td>1249.996517</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951842382</th>\n",
       "      <td>0.865327</td>\n",
       "      <td>3.090630</td>\n",
       "      <td>0.439941</td>\n",
       "      <td>3.012829</td>\n",
       "      <td>-0.009557</td>\n",
       "      <td>-0.412060</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.003020</td>\n",
       "      <td>52.860990</td>\n",
       "      <td>42.34</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>7475</td>\n",
       "      <td>1167</td>\n",
       "      <td>7750</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.916411</td>\n",
       "      <td>1249.996517</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951842395</th>\n",
       "      <td>0.727973</td>\n",
       "      <td>1.357394</td>\n",
       "      <td>0.692553</td>\n",
       "      <td>3.901022</td>\n",
       "      <td>-0.017789</td>\n",
       "      <td>0.068677</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.012965</td>\n",
       "      <td>74.413755</td>\n",
       "      <td>43.20</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>7476</td>\n",
       "      <td>1150</td>\n",
       "      <td>7751</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.916411</td>\n",
       "      <td>1249.996517</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951842379</th>\n",
       "      <td>0.741709</td>\n",
       "      <td>1.236169</td>\n",
       "      <td>0.863803</td>\n",
       "      <td>3.400814</td>\n",
       "      <td>-0.022361</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.98</td>\n",
       "      <td>0.000261</td>\n",
       "      <td>101.024235</td>\n",
       "      <td>46.01</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>7476</td>\n",
       "      <td>1158</td>\n",
       "      <td>7751</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.916411</td>\n",
       "      <td>1249.996517</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951843078</th>\n",
       "      <td>0.796650</td>\n",
       "      <td>2.880720</td>\n",
       "      <td>0.766510</td>\n",
       "      <td>3.490068</td>\n",
       "      <td>-0.025930</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.004844</td>\n",
       "      <td>80.856945</td>\n",
       "      <td>28.32</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>7477</td>\n",
       "      <td>1141</td>\n",
       "      <td>7751</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.916411</td>\n",
       "      <td>1249.996517</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951852455</th>\n",
       "      <td>0.700503</td>\n",
       "      <td>0.805628</td>\n",
       "      <td>0.361237</td>\n",
       "      <td>5.193883</td>\n",
       "      <td>-0.176317</td>\n",
       "      <td>-0.686767</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.000170</td>\n",
       "      <td>381.306315</td>\n",
       "      <td>34.54</td>\n",
       "      <td>...</td>\n",
       "      <td>VISp</td>\n",
       "      <td>8439</td>\n",
       "      <td>827</td>\n",
       "      <td>8198</td>\n",
       "      <td>probeC</td>\n",
       "      <td></td>\n",
       "      <td>29999.994202</td>\n",
       "      <td>1249.999758</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951852509</th>\n",
       "      <td>0.645561</td>\n",
       "      <td>1.997127</td>\n",
       "      <td>0.386740</td>\n",
       "      <td>5.815448</td>\n",
       "      <td>-0.054624</td>\n",
       "      <td>-0.412060</td>\n",
       "      <td>0.98</td>\n",
       "      <td>0.001239</td>\n",
       "      <td>139.350705</td>\n",
       "      <td>27.50</td>\n",
       "      <td>...</td>\n",
       "      <td>VISp</td>\n",
       "      <td>8452</td>\n",
       "      <td>796</td>\n",
       "      <td>8207</td>\n",
       "      <td>probeC</td>\n",
       "      <td></td>\n",
       "      <td>29999.994202</td>\n",
       "      <td>1249.999758</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951852502</th>\n",
       "      <td>0.686767</td>\n",
       "      <td>1.538178</td>\n",
       "      <td>0.427633</td>\n",
       "      <td>4.423575</td>\n",
       "      <td>-0.085400</td>\n",
       "      <td>-0.206030</td>\n",
       "      <td>0.98</td>\n",
       "      <td>0.004913</td>\n",
       "      <td>140.351055</td>\n",
       "      <td>28.57</td>\n",
       "      <td>...</td>\n",
       "      <td>VISp</td>\n",
       "      <td>8452</td>\n",
       "      <td>796</td>\n",
       "      <td>8207</td>\n",
       "      <td>probeC</td>\n",
       "      <td></td>\n",
       "      <td>29999.994202</td>\n",
       "      <td>1249.999758</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951852493</th>\n",
       "      <td>0.700503</td>\n",
       "      <td>2.496928</td>\n",
       "      <td>0.367526</td>\n",
       "      <td>4.126723</td>\n",
       "      <td>-0.044769</td>\n",
       "      <td>0.549414</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.013483</td>\n",
       "      <td>122.916690</td>\n",
       "      <td>38.91</td>\n",
       "      <td>...</td>\n",
       "      <td>VISp</td>\n",
       "      <td>8452</td>\n",
       "      <td>796</td>\n",
       "      <td>8207</td>\n",
       "      <td>probeC</td>\n",
       "      <td></td>\n",
       "      <td>29999.994202</td>\n",
       "      <td>1249.999758</td>\n",
       "      <td>True</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951852577</th>\n",
       "      <td>0.274707</td>\n",
       "      <td>18.142854</td>\n",
       "      <td>0.570843</td>\n",
       "      <td>4.897546</td>\n",
       "      <td>-0.126033</td>\n",
       "      <td>1.684215</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.005939</td>\n",
       "      <td>105.665430</td>\n",
       "      <td>24.40</td>\n",
       "      <td>...</td>\n",
       "      <td>VISp</td>\n",
       "      <td>8466</td>\n",
       "      <td>766</td>\n",
       "      <td>8215</td>\n",
       "      <td>probeC</td>\n",
       "      <td></td>\n",
       "      <td>29999.994202</td>\n",
       "      <td>1249.999758</td>\n",
       "      <td>True</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>116 rows × 90 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           waveform_duration  firing_rate  waveform_PT_ratio   d_prime  \\\n",
       "unit_id                                                                  \n",
       "951842332           0.315913    18.898412           0.790630  6.522781   \n",
       "951842382           0.865327     3.090630           0.439941  3.012829   \n",
       "951842395           0.727973     1.357394           0.692553  3.901022   \n",
       "951842379           0.741709     1.236169           0.863803  3.400814   \n",
       "951843078           0.796650     2.880720           0.766510  3.490068   \n",
       "...                      ...          ...                ...       ...   \n",
       "951852455           0.700503     0.805628           0.361237  5.193883   \n",
       "951852509           0.645561     1.997127           0.386740  5.815448   \n",
       "951852502           0.686767     1.538178           0.427633  4.423575   \n",
       "951852493           0.700503     2.496928           0.367526  4.126723   \n",
       "951852577           0.274707    18.142854           0.570843  4.897546   \n",
       "\n",
       "           waveform_recovery_slope  waveform_velocity_below  presence_ratio  \\\n",
       "unit_id                                                                       \n",
       "951842332                -0.084343                 0.392438            0.99   \n",
       "951842382                -0.009557                -0.412060            0.99   \n",
       "951842395                -0.017789                 0.068677            0.99   \n",
       "951842379                -0.022361                 0.000000            0.98   \n",
       "951843078                -0.025930                 0.000000            0.99   \n",
       "...                            ...                      ...             ...   \n",
       "951852455                -0.176317                -0.686767            0.99   \n",
       "951852509                -0.054624                -0.412060            0.98   \n",
       "951852502                -0.085400                -0.206030            0.98   \n",
       "951852493                -0.044769                 0.549414            0.99   \n",
       "951852577                -0.126033                 1.684215            0.99   \n",
       "\n",
       "            L_ratio  waveform_amplitude  max_drift  ...  \\\n",
       "unit_id                                             ...   \n",
       "951842332  0.003595           98.587320      50.87  ...   \n",
       "951842382  0.003020           52.860990      42.34  ...   \n",
       "951842395  0.012965           74.413755      43.20  ...   \n",
       "951842379  0.000261          101.024235      46.01  ...   \n",
       "951843078  0.004844           80.856945      28.32  ...   \n",
       "...             ...                 ...        ...  ...   \n",
       "951852455  0.000170          381.306315      34.54  ...   \n",
       "951852509  0.001239          139.350705      27.50  ...   \n",
       "951852502  0.004913          140.351055      28.57  ...   \n",
       "951852493  0.013483          122.916690      38.91  ...   \n",
       "951852577  0.005939          105.665430      24.40  ...   \n",
       "\n",
       "           ecephys_structure_acronym  anterior_posterior_ccf_coordinate  \\\n",
       "unit_id                                                                   \n",
       "951842332                      VISpm                               7467   \n",
       "951842382                      VISpm                               7475   \n",
       "951842395                      VISpm                               7476   \n",
       "951842379                      VISpm                               7476   \n",
       "951843078                      VISpm                               7477   \n",
       "...                              ...                                ...   \n",
       "951852455                       VISp                               8439   \n",
       "951852509                       VISp                               8452   \n",
       "951852502                       VISp                               8452   \n",
       "951852493                       VISp                               8452   \n",
       "951852577                       VISp                               8466   \n",
       "\n",
       "           dorsal_ventral_ccf_coordinate  left_right_ccf_coordinate  \\\n",
       "unit_id                                                               \n",
       "951842332                           1300                       7737   \n",
       "951842382                           1167                       7750   \n",
       "951842395                           1150                       7751   \n",
       "951842379                           1158                       7751   \n",
       "951843078                           1141                       7751   \n",
       "...                                  ...                        ...   \n",
       "951852455                            827                       8198   \n",
       "951852509                            796                       8207   \n",
       "951852502                            796                       8207   \n",
       "951852493                            796                       8207   \n",
       "951852577                            766                       8215   \n",
       "\n",
       "           probe_description  location  probe_sampling_rate  \\\n",
       "unit_id                                                       \n",
       "951842332             probeB                   29999.916411   \n",
       "951842382             probeB                   29999.916411   \n",
       "951842395             probeB                   29999.916411   \n",
       "951842379             probeB                   29999.916411   \n",
       "951843078             probeB                   29999.916411   \n",
       "...                      ...       ...                  ...   \n",
       "951852455             probeC                   29999.994202   \n",
       "951852509             probeC                   29999.994202   \n",
       "951852502             probeC                   29999.994202   \n",
       "951852493             probeC                   29999.994202   \n",
       "951852577             probeC                   29999.994202   \n",
       "\n",
       "           probe_lfp_sampling_rate  probe_has_lfp_data  cell_type  \n",
       "unit_id                                                            \n",
       "951842332              1249.996517                True        PV-  \n",
       "951842382              1249.996517                True        PV-  \n",
       "951842395              1249.996517                True        PV-  \n",
       "951842379              1249.996517                True        PV-  \n",
       "951843078              1249.996517                True        PV-  \n",
       "...                            ...                 ...        ...  \n",
       "951852455              1249.999758                True        PV-  \n",
       "951852509              1249.999758                True        PV-  \n",
       "951852502              1249.999758                True        PV-  \n",
       "951852493              1249.999758                True        PV+  \n",
       "951852577              1249.999758                True        PV+  \n",
       "\n",
       "[116 rows x 90 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cre_pos_units_visp=list(cre_pos_units_visp)\n",
    "df_visp_units=session.units[session.units.ecephys_structure_acronym.str.match('VISp')]\n",
    "df_visp_units_index = df_visp_units.index.values.tolist()\n",
    "df_visp_units['cell_type']=''\n",
    "id = df_visp_units.index.values.tolist()\n",
    "\n",
    "\n",
    "df_visp_units_rows = len(df_visp_units.axes[0])\n",
    "\n",
    "\n",
    "for i in range(df_visp_units_rows):\n",
    "    if id[i] in cre_pos_units_visp:\n",
    "        df_visp_units.at[id [i],'cell_type']='PV+'\n",
    "    else:\n",
    "        df_visp_units.at[id [i],'cell_type']='PV-'\n",
    "\n",
    "df_visp_units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generating another dataset with VISp units cell_type and firing_rate columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>firing_rate</th>\n",
       "      <th>cell_type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>951880505</th>\n",
       "      <td>2.264710</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880514</th>\n",
       "      <td>6.061888</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880485</th>\n",
       "      <td>13.787772</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880545</th>\n",
       "      <td>2.157048</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880526</th>\n",
       "      <td>2.814485</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951889030</th>\n",
       "      <td>13.559037</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951888972</th>\n",
       "      <td>4.317223</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951889021</th>\n",
       "      <td>6.782832</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951889425</th>\n",
       "      <td>0.230895</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951889147</th>\n",
       "      <td>14.335694</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>129 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           firing_rate cell_type\n",
       "unit_id                         \n",
       "951880505     2.264710       PV-\n",
       "951880514     6.061888       PV-\n",
       "951880485    13.787772       PV-\n",
       "951880545     2.157048       PV+\n",
       "951880526     2.814485       PV+\n",
       "...                ...       ...\n",
       "951889030    13.559037       PV-\n",
       "951888972     4.317223       PV-\n",
       "951889021     6.782832       PV-\n",
       "951889425     0.230895       PV-\n",
       "951889147    14.335694       PV-\n",
       "\n",
       "[129 rows x 2 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_visp_firing_rate = df_visp_units[['firing_rate','cell_type']]\n",
    "df_visp_firing_rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under the stimulus condition of 10ms pulses, aligning spikes in VISpm to the start of each light pulse so that we can the average firing rate for each unit in VISpm as a function of time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "trials = session.optogenetic_stimulation_epochs[(session.optogenetic_stimulation_epochs.duration > 0.009) & \\\n",
    "                                                (session.optogenetic_stimulation_epochs.duration < 0.02)]\n",
    "\n",
    "units_pm = session.units[session.units.ecephys_structure_acronym.str.match('VISpm')]\n",
    "\n",
    "time_resolution = 0.0005 # 0.5 ms bins\n",
    "\n",
    "bin_edges = np.arange(-0.01, 0.025, time_resolution)\n",
    "\n",
    "def optotagging_spike_counts(bin_edges, trials, units_pm):\n",
    "    \n",
    "    time_resolution = np.mean(np.diff(bin_edges))\n",
    "\n",
    "    spike_matrix_pm = np.zeros( (len(trials), len(bin_edges), len(units_pm)) )\n",
    "\n",
    "    for unit_idx_pm, unit_id_pm in enumerate(units_pm.index.values):\n",
    "\n",
    "        spike_times_pm = session.spike_times[unit_id_pm]\n",
    "\n",
    "        for trial_idx, trial_start in enumerate(trials.start_time.values):\n",
    "\n",
    "            in_range_pm = (spike_times_pm > (trial_start + bin_edges[0])) * \\\n",
    "                       (spike_times_pm < (trial_start + bin_edges[-1]))\n",
    "\n",
    "            binned_times_pm = ((spike_times_pm[in_range_pm] - (trial_start + bin_edges[0])) / time_resolution).astype('int')\n",
    "            spike_matrix_pm[trial_idx, binned_times_pm, unit_idx_pm] = 1\n",
    "\n",
    "    return xr.DataArray(\n",
    "        name='spike_counts',\n",
    "        data=spike_matrix_pm,\n",
    "        coords={\n",
    "            'trial_id': trials.index.values,\n",
    "            'time_relative_to_stimulus_onset': bin_edges,\n",
    "            'unit_id': units_pm.index.values\n",
    "        },\n",
    "        dims=['trial_id', 'time_relative_to_stimulus_onset', 'unit_id']\n",
    "    )\n",
    "\n",
    "da_vispm = optotagging_spike_counts(bin_edges, trials, units_pm)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting units in VISpm that increase their firing rate during the 10ms pulse "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "baseline_vispm = da_vispm.sel(time_relative_to_stimulus_onset=slice(-0.01,-0.002))\n",
    "\n",
    "baseline_rate_vispm = baseline_vispm.sum(dim='time_relative_to_stimulus_onset').mean(dim='trial_id') / 0.008\n",
    "\n",
    "evoked_vispm = da_vispm.sel(time_relative_to_stimulus_onset=slice(0.001,0.009))\n",
    "\n",
    "evoked_rate_vispm = evoked_vispm.sum(dim='time_relative_to_stimulus_onset').mean(dim='trial_id') / 0.008"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selecting a threshold: 2x increase in firing rate (red line) to find PV+ insterneurons in VISpm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([951880545, 951880526, 951880711, 951882217, 951880845, 951880931,\n",
       "       951880964, 951881254, 951881219, 951882047, 951882340, 951876240,\n",
       "       951876468, 951876517, 951876827, 951876906, 951877130])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cre_pos_units_vispm = da_vispm.unit_id[(evoked_rate_vispm / (baseline_rate_vispm + 1)) > 2].values \n",
    "cre_pos_units_vispm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Adding a cell_type column to the VISp units dataset and assigning \"PV+\" or \"PV-\"to each VISp units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_drift</th>\n",
       "      <th>isolation_distance</th>\n",
       "      <th>amplitude_cutoff</th>\n",
       "      <th>peak_channel_id</th>\n",
       "      <th>presence_ratio</th>\n",
       "      <th>waveform_recovery_slope</th>\n",
       "      <th>silhouette_score</th>\n",
       "      <th>waveform_amplitude</th>\n",
       "      <th>firing_rate</th>\n",
       "      <th>L_ratio</th>\n",
       "      <th>...</th>\n",
       "      <th>ecephys_structure_acronym</th>\n",
       "      <th>anterior_posterior_ccf_coordinate</th>\n",
       "      <th>dorsal_ventral_ccf_coordinate</th>\n",
       "      <th>left_right_ccf_coordinate</th>\n",
       "      <th>probe_description</th>\n",
       "      <th>location</th>\n",
       "      <th>probe_sampling_rate</th>\n",
       "      <th>probe_lfp_sampling_rate</th>\n",
       "      <th>probe_has_lfp_data</th>\n",
       "      <th>cell_type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>951880505</th>\n",
       "      <td>33.75</td>\n",
       "      <td>46.470468</td>\n",
       "      <td>0.079979</td>\n",
       "      <td>849740974</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.006206</td>\n",
       "      <td>0.051662</td>\n",
       "      <td>85.019025</td>\n",
       "      <td>2.264710</td>\n",
       "      <td>0.010990</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeA</td>\n",
       "      <td></td>\n",
       "      <td>29999.971918</td>\n",
       "      <td>1249.998830</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880514</th>\n",
       "      <td>38.24</td>\n",
       "      <td>59.206188</td>\n",
       "      <td>0.004442</td>\n",
       "      <td>849740972</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.034808</td>\n",
       "      <td>0.098987</td>\n",
       "      <td>105.848340</td>\n",
       "      <td>6.061888</td>\n",
       "      <td>0.013646</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeA</td>\n",
       "      <td></td>\n",
       "      <td>29999.971918</td>\n",
       "      <td>1249.998830</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880485</th>\n",
       "      <td>40.52</td>\n",
       "      <td>89.544932</td>\n",
       "      <td>0.007652</td>\n",
       "      <td>849740972</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.049190</td>\n",
       "      <td>0.105417</td>\n",
       "      <td>122.360940</td>\n",
       "      <td>13.787772</td>\n",
       "      <td>0.003165</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeA</td>\n",
       "      <td></td>\n",
       "      <td>29999.971918</td>\n",
       "      <td>1249.998830</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880545</th>\n",
       "      <td>39.68</td>\n",
       "      <td>55.758505</td>\n",
       "      <td>0.017945</td>\n",
       "      <td>849740978</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.051330</td>\n",
       "      <td>0.108410</td>\n",
       "      <td>100.304880</td>\n",
       "      <td>2.157048</td>\n",
       "      <td>0.003213</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeA</td>\n",
       "      <td></td>\n",
       "      <td>29999.971918</td>\n",
       "      <td>1249.998830</td>\n",
       "      <td>True</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880526</th>\n",
       "      <td>38.98</td>\n",
       "      <td>57.378069</td>\n",
       "      <td>0.005278</td>\n",
       "      <td>849740976</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.033964</td>\n",
       "      <td>0.047172</td>\n",
       "      <td>111.880080</td>\n",
       "      <td>2.814485</td>\n",
       "      <td>0.003848</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeA</td>\n",
       "      <td></td>\n",
       "      <td>29999.971918</td>\n",
       "      <td>1249.998830</td>\n",
       "      <td>True</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877130</th>\n",
       "      <td>10.33</td>\n",
       "      <td>39.250499</td>\n",
       "      <td>0.050423</td>\n",
       "      <td>849738800</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.051865</td>\n",
       "      <td>0.007757</td>\n",
       "      <td>97.661265</td>\n",
       "      <td>16.767858</td>\n",
       "      <td>0.172112</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.920462</td>\n",
       "      <td>1249.996686</td>\n",
       "      <td>True</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877115</th>\n",
       "      <td>9.94</td>\n",
       "      <td>31.292133</td>\n",
       "      <td>0.066866</td>\n",
       "      <td>849738800</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.064726</td>\n",
       "      <td>0.002326</td>\n",
       "      <td>105.325935</td>\n",
       "      <td>11.092469</td>\n",
       "      <td>0.222665</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.920462</td>\n",
       "      <td>1249.996686</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877102</th>\n",
       "      <td>15.91</td>\n",
       "      <td>33.937280</td>\n",
       "      <td>0.066776</td>\n",
       "      <td>849738800</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.070027</td>\n",
       "      <td>0.009881</td>\n",
       "      <td>109.654545</td>\n",
       "      <td>12.076011</td>\n",
       "      <td>0.198529</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.920462</td>\n",
       "      <td>1249.996686</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877395</th>\n",
       "      <td>7.59</td>\n",
       "      <td>88.418798</td>\n",
       "      <td>0.092654</td>\n",
       "      <td>849738830</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.097955</td>\n",
       "      <td>0.115003</td>\n",
       "      <td>94.115385</td>\n",
       "      <td>12.954990</td>\n",
       "      <td>0.003724</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.920462</td>\n",
       "      <td>1249.996686</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877463</th>\n",
       "      <td>24.25</td>\n",
       "      <td>52.069136</td>\n",
       "      <td>0.001578</td>\n",
       "      <td>849738838</td>\n",
       "      <td>0.99</td>\n",
       "      <td>-0.039687</td>\n",
       "      <td>0.134298</td>\n",
       "      <td>159.198780</td>\n",
       "      <td>3.244172</td>\n",
       "      <td>0.002730</td>\n",
       "      <td>...</td>\n",
       "      <td>VISpm</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>-1000</td>\n",
       "      <td>probeB</td>\n",
       "      <td></td>\n",
       "      <td>29999.920462</td>\n",
       "      <td>1249.996686</td>\n",
       "      <td>True</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>115 rows × 90 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           max_drift  isolation_distance  amplitude_cutoff  peak_channel_id  \\\n",
       "unit_id                                                                       \n",
       "951880505      33.75           46.470468          0.079979        849740974   \n",
       "951880514      38.24           59.206188          0.004442        849740972   \n",
       "951880485      40.52           89.544932          0.007652        849740972   \n",
       "951880545      39.68           55.758505          0.017945        849740978   \n",
       "951880526      38.98           57.378069          0.005278        849740976   \n",
       "...              ...                 ...               ...              ...   \n",
       "951877130      10.33           39.250499          0.050423        849738800   \n",
       "951877115       9.94           31.292133          0.066866        849738800   \n",
       "951877102      15.91           33.937280          0.066776        849738800   \n",
       "951877395       7.59           88.418798          0.092654        849738830   \n",
       "951877463      24.25           52.069136          0.001578        849738838   \n",
       "\n",
       "           presence_ratio  waveform_recovery_slope  silhouette_score  \\\n",
       "unit_id                                                                \n",
       "951880505            0.99                -0.006206          0.051662   \n",
       "951880514            0.99                -0.034808          0.098987   \n",
       "951880485            0.99                -0.049190          0.105417   \n",
       "951880545            0.99                -0.051330          0.108410   \n",
       "951880526            0.99                -0.033964          0.047172   \n",
       "...                   ...                      ...               ...   \n",
       "951877130            0.99                -0.051865          0.007757   \n",
       "951877115            0.99                -0.064726          0.002326   \n",
       "951877102            0.99                -0.070027          0.009881   \n",
       "951877395            0.99                -0.097955          0.115003   \n",
       "951877463            0.99                -0.039687          0.134298   \n",
       "\n",
       "           waveform_amplitude  firing_rate   L_ratio  ...  \\\n",
       "unit_id                                               ...   \n",
       "951880505           85.019025     2.264710  0.010990  ...   \n",
       "951880514          105.848340     6.061888  0.013646  ...   \n",
       "951880485          122.360940    13.787772  0.003165  ...   \n",
       "951880545          100.304880     2.157048  0.003213  ...   \n",
       "951880526          111.880080     2.814485  0.003848  ...   \n",
       "...                       ...          ...       ...  ...   \n",
       "951877130           97.661265    16.767858  0.172112  ...   \n",
       "951877115          105.325935    11.092469  0.222665  ...   \n",
       "951877102          109.654545    12.076011  0.198529  ...   \n",
       "951877395           94.115385    12.954990  0.003724  ...   \n",
       "951877463          159.198780     3.244172  0.002730  ...   \n",
       "\n",
       "           ecephys_structure_acronym  anterior_posterior_ccf_coordinate  \\\n",
       "unit_id                                                                   \n",
       "951880505                      VISpm                              -1000   \n",
       "951880514                      VISpm                              -1000   \n",
       "951880485                      VISpm                              -1000   \n",
       "951880545                      VISpm                              -1000   \n",
       "951880526                      VISpm                              -1000   \n",
       "...                              ...                                ...   \n",
       "951877130                      VISpm                              -1000   \n",
       "951877115                      VISpm                              -1000   \n",
       "951877102                      VISpm                              -1000   \n",
       "951877395                      VISpm                              -1000   \n",
       "951877463                      VISpm                              -1000   \n",
       "\n",
       "           dorsal_ventral_ccf_coordinate  left_right_ccf_coordinate  \\\n",
       "unit_id                                                               \n",
       "951880505                          -1000                      -1000   \n",
       "951880514                          -1000                      -1000   \n",
       "951880485                          -1000                      -1000   \n",
       "951880545                          -1000                      -1000   \n",
       "951880526                          -1000                      -1000   \n",
       "...                                  ...                        ...   \n",
       "951877130                          -1000                      -1000   \n",
       "951877115                          -1000                      -1000   \n",
       "951877102                          -1000                      -1000   \n",
       "951877395                          -1000                      -1000   \n",
       "951877463                          -1000                      -1000   \n",
       "\n",
       "           probe_description  location  probe_sampling_rate  \\\n",
       "unit_id                                                       \n",
       "951880505             probeA                   29999.971918   \n",
       "951880514             probeA                   29999.971918   \n",
       "951880485             probeA                   29999.971918   \n",
       "951880545             probeA                   29999.971918   \n",
       "951880526             probeA                   29999.971918   \n",
       "...                      ...       ...                  ...   \n",
       "951877130             probeB                   29999.920462   \n",
       "951877115             probeB                   29999.920462   \n",
       "951877102             probeB                   29999.920462   \n",
       "951877395             probeB                   29999.920462   \n",
       "951877463             probeB                   29999.920462   \n",
       "\n",
       "           probe_lfp_sampling_rate  probe_has_lfp_data  cell_type  \n",
       "unit_id                                                            \n",
       "951880505              1249.998830                True        PV-  \n",
       "951880514              1249.998830                True        PV-  \n",
       "951880485              1249.998830                True        PV-  \n",
       "951880545              1249.998830                True        PV+  \n",
       "951880526              1249.998830                True        PV+  \n",
       "...                            ...                 ...        ...  \n",
       "951877130              1249.996686                True        PV+  \n",
       "951877115              1249.996686                True        PV-  \n",
       "951877102              1249.996686                True        PV-  \n",
       "951877395              1249.996686                True        PV-  \n",
       "951877463              1249.996686                True        PV-  \n",
       "\n",
       "[115 rows x 90 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_vispm_units=session.units[session.units.ecephys_structure_acronym.str.match('VISpm')]\n",
    "df_vispm_units['cell_type']=''\n",
    "cre_pos_units_vispm=list(cre_pos_units_vispm)\n",
    "df_vispm_units_index = df_vispm_units.index.values.tolist()\n",
    "id = df_vispm_units.index.values.tolist()\n",
    "\n",
    "\n",
    "df_vispm_units_rows = len(df_vispm_units.axes[0])\n",
    "\n",
    "\n",
    "for i in range(df_vispm_units_rows):\n",
    "    if id[i] in cre_pos_units_vispm:\n",
    "        df_vispm_units.at[id [i],'cell_type']='PV+'\n",
    "    else:\n",
    "        df_vispm_units.at[id [i],'cell_type']='PV-'\n",
    "\n",
    "df_vispm_units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generating another dataset with VISpm units cell_type and firing_rate columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>firing_rate</th>\n",
       "      <th>cell_type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unit_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>951880505</th>\n",
       "      <td>2.264710</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880514</th>\n",
       "      <td>6.061888</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880485</th>\n",
       "      <td>13.787772</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880545</th>\n",
       "      <td>2.157048</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951880526</th>\n",
       "      <td>2.814485</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877130</th>\n",
       "      <td>16.767858</td>\n",
       "      <td>PV+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877115</th>\n",
       "      <td>11.092469</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877102</th>\n",
       "      <td>12.076011</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877395</th>\n",
       "      <td>12.954990</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951877463</th>\n",
       "      <td>3.244172</td>\n",
       "      <td>PV-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>115 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           firing_rate cell_type\n",
       "unit_id                         \n",
       "951880505     2.264710       PV-\n",
       "951880514     6.061888       PV-\n",
       "951880485    13.787772       PV-\n",
       "951880545     2.157048       PV+\n",
       "951880526     2.814485       PV+\n",
       "...                ...       ...\n",
       "951877130    16.767858       PV+\n",
       "951877115    11.092469       PV-\n",
       "951877102    12.076011       PV-\n",
       "951877395    12.954990       PV-\n",
       "951877463     3.244172       PV-\n",
       "\n",
       "[115 rows x 2 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_vispm_firing_rate = df_vispm_units[['firing_rate','cell_type']]\n",
    "df_vispm_firing_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           firing_rate cell_type ecephys_structure_acronym\n",
      "unit_id                                                   \n",
      "951888688    19.822821       PV-                      VISp\n",
      "951888697     4.583840       PV-                      VISp\n",
      "951888780    23.041273       PV-                      VISp\n",
      "951888826     6.787595       PV-                      VISp\n",
      "951888857    13.335804       PV-                      VISp\n",
      "['VISp']\n"
     ]
    }
   ],
   "source": [
    "pixels_p = df_visp_units[['firing_rate', 'cell_type', 'ecephys_structure_acronym']]\n",
    "pixels_p = pixels_p[pixels_p['ecephys_structure_acronym'] != 'VISpm']\n",
    "print(pixels_p.head())\n",
    "print(pixels_p.ecephys_structure_acronym.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           firing_rate cell_type ecephys_structure_acronym\n",
      "unit_id                                                   \n",
      "951888688    19.822821       PV-                      VISp\n",
      "951888697     4.583840       PV-                      VISp\n",
      "951888780    23.041273       PV-                      VISp\n",
      "951888826     6.787595       PV-                      VISp\n",
      "951888857    13.335804       PV-                      VISp\n",
      "           firing_rate cell_type ecephys_structure_acronym\n",
      "unit_id                                                   \n",
      "951880505     2.264710       PV-                     VISpm\n",
      "951880514     6.061888       PV-                     VISpm\n",
      "951880485    13.787772       PV-                     VISpm\n",
      "951880545     2.157048       PV+                     VISpm\n",
      "951880526     2.814485       PV+                     VISpm\n"
     ]
    }
   ],
   "source": [
    "pixels_pm = df_vispm_units[['firing_rate', 'cell_type', 'ecephys_structure_acronym']]\n",
    "print(pixels_p.head())\n",
    "print(pixels_pm.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combine the two"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           firing_rate cell_type ecephys_structure_acronym\n",
      "unit_id                                                   \n",
      "951888688    19.822821       PV-                      VISp\n",
      "951888697     4.583840       PV-                      VISp\n",
      "951888780    23.041273       PV-                      VISp\n",
      "951888826     6.787595       PV-                      VISp\n",
      "951888857    13.335804       PV-                      VISp\n",
      "...                ...       ...                       ...\n",
      "951877130    16.767858       PV+                     VISpm\n",
      "951877115    11.092469       PV-                     VISpm\n",
      "951877102    12.076011       PV-                     VISpm\n",
      "951877395    12.954990       PV-                     VISpm\n",
      "951877463     3.244172       PV-                     VISpm\n",
      "\n",
      "[129 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "both_pixels = pd.concat([pixels_p, pixels_pm],axis=0)\n",
    "print(both_pixels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combining Cell Types and Neuropixels datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's look at all the modified VISp and VISpm datasets we have for the firing rate from both datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           firing_rate cell_type ecephys_structure_acronym\n",
      "unit_id                                                   \n",
      "951888688    19.822821       PV-                      VISp\n",
      "951888697     4.583840       PV-                      VISp\n",
      "951888780    23.041273       PV-                      VISp\n",
      "951888826     6.787595       PV-                      VISp\n",
      "951888857    13.335804       PV-                      VISp\n",
      "   firing_rate ecephys_structure_acronym\n",
      "0     0.000000                      VISp\n",
      "1    79.952029                      VISp\n",
      "2    12.666099                      VISp\n",
      "3    17.890688                      VISp\n",
      "4    10.611937                      VISp\n",
      "   firing_rate ecephys_structure_acronym\n",
      "0    39.570967                     VISpm\n",
      "1    41.345379                     VISpm\n",
      "2    21.317416                     VISpm\n",
      "3    73.053430                     VISpm\n",
      "4    16.740791                     VISpm\n"
     ]
    }
   ],
   "source": [
    "#neuropixels\n",
    "print(both_pixels.head())\n",
    "#cell types\n",
    "print(cell_p.head())\n",
    "print(cell_pm.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changing Cell Types modified datasets to include cell_type (pv +/-)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['VISp' 'VISpm']\n",
      "['VISp' 'VISpm']\n"
     ]
    }
   ],
   "source": [
    "cell_p['cell_type'] = 0\n",
    "cell_pm['cell_type'] = 0\n",
    "both_pixels = both_pixels.reindex(columns=['firing_rate', 'ecephys_structure_acronym', 'cell_type'])\n",
    "both_cells = pd.concat([cell_p,cell_pm],axis=0)\n",
    "print(both_pixels.ecephys_structure_acronym.unique())\n",
    "print(both_cells.ecephys_structure_acronym.unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Combining the two datasets: Nueorpixels and Cell Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           firing_rate ecephys_structure_acronym cell_type\n",
      "951888688    19.822821                      VISp       PV-\n",
      "951888697     4.583840                      VISp       PV-\n",
      "951888780    23.041273                      VISp       PV-\n",
      "951888826     6.787595                      VISp       PV-\n",
      "951888857    13.335804                      VISp       PV-\n",
      "...                ...                       ...       ...\n",
      "84           65.288801                     VISpm         0\n",
      "85          100.401606                     VISpm         0\n",
      "86           31.084528                     VISpm         0\n",
      "87           15.202519                     VISpm         0\n",
      "88           11.093362                     VISpm         0\n",
      "\n",
      "[1803 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "neuropix_and_celltypes = pd.concat([both_pixels, both_cells], axis = 0)\n",
    "print(neuropix_and_celltypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#neuropix_and_celltypes.ecephys_structure_acronym.replace(['VISpm', 'VISp'], [0, 1], inplace=True)\n",
    "#print(neuropix_and_celltypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a new dataset to combine both Neuropixel and Cell Types data, with another column specifying which dataset the data is from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "specific_both_cells = both_cells['dataset'] = 'Cell Types'\n",
    "specific_both_pixels = both_pixels['dataset'] = 'Neuropixels'\n",
    "specific_both = pd.concat([both_cells, both_pixels], axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Analysis & Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Include cells that describe the steps in your data analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Performing PCA on the VISp dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 505.125x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visp_data = visp_features.drop('structure_parent__acronym',axis=1)\n",
    "visp_data = (visp_data - visp_data.mean())/visp_data.std()\n",
    "pca = PCA(n_components = 2)           \n",
    "VISP_2D = pca.fit_transform(visp_data)  \n",
    "visp_features['PCA1'] = VISP_2D[:, 0]\n",
    "visp_features['PCA2'] = VISP_2D[:, 1]\n",
    "sns.lmplot(\"PCA1\", \"PCA2\",hue='structure_parent__acronym', data=visp_features, fit_reg=False, palette=\"Set1\")\n",
    "sns.set_palette('Paired')\n",
    "plt.title('PCA for VISp Neurons in Cell Types Dataset')\n",
    "plt.show()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Performing PCA on the VISpm dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 505.125x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "vispm_data = vispm_features.drop('structure_parent__acronym',axis=1)\n",
    "vispm_data = (vispm_data - vispm_data.mean())/vispm_data.std()\n",
    "pca = PCA(n_components = 2)           \n",
    "VISPM_2D = pca.fit_transform(vispm_data)  \n",
    "vispm_features['PCA1'] = VISPM_2D[:, 0]\n",
    "vispm_features['PCA2'] = VISPM_2D[:, 1]\n",
    "sns.lmplot(\"PCA1\", \"PCA2\",hue='structure_parent__acronym', data=vispm_features, fit_reg=False, palette=\"Set1\")\n",
    "plt.title('PCA for VISpm Neurons in Cell Types Dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PCA for VISp and VISpm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 505.125x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visp_and_m_data = visp_and_m_features.drop('structure_parent__acronym',axis=1)\n",
    "visp_and_m_data = (visp_and_m_data - visp_and_m_data.mean())/visp_and_m_data.std()\n",
    "pca = PCA(n_components = 2)           \n",
    "VISPM_2D = pca.fit_transform(visp_and_m_data)  \n",
    "visp_and_m_features['PCA1'] = VISPM_2D[:, 0]\n",
    "visp_and_m_features['PCA2'] = VISPM_2D[:, 1]\n",
    "sns.lmplot(\"PCA1\", \"PCA2\",hue='structure_parent__acronym', data=visp_and_m_features, fit_reg=False, palette=\"Set1\")\n",
    "plt.title('PCA for VISp and VISpm Neurons in Cell Types Dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "K-Means Clustering of n=2 for VISp and VISpm combined data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 441.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans #Import the KMeans model\n",
    "\n",
    "kmeans = KMeans(n_clusters=2) # Set up a kmeans model with 3 clusters\n",
    "\n",
    "kmeans.fit(VISPM_2D) # Fit our two dimensional data\n",
    "y_kmeans = kmeans.predict(VISPM_2D) \n",
    "visp_and_m_features['kmeans_group'] = y_kmeans\n",
    "\n",
    "sns.lmplot(\"PCA1\", \"PCA2\", hue='kmeans_group', data=visp_and_m_features, fit_reg=False, palette=\"Set1\")\n",
    "centers = kmeans.cluster_centers_\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)\n",
    "plt.title('K-Means Clustering for VISp and VISpm Neurons in Cell Types Dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Heatmap for VISp neurons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "s=sns.heatmap(visp_data.corr(), cmap='coolwarm') \n",
    "s.set_yticklabels(s.get_yticklabels(),rotation=0,fontsize=8)\n",
    "s.set_xticklabels(s.get_xticklabels(),rotation=50,fontsize=8)\n",
    "plt.title('Heatmap for VISp Neurons in Cell Types Dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Heatmap for VISpm neurons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "s=sns.heatmap(vispm_data.corr(),cmap='coolwarm') \n",
    "s.set_yticklabels(s.get_yticklabels(),rotation=30,fontsize=7)\n",
    "s.set_xticklabels(s.get_xticklabels(),rotation=30,fontsize=7)\n",
    "plt.title('Heatmap for VISpm Neurons in Cell Types Dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Heatmap for VISp and VISpm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "s=sns.heatmap(visp_and_m_data.corr(),cmap='coolwarm') \n",
    "s.set_yticklabels(s.get_yticklabels(),rotation=30,fontsize=7)\n",
    "s.set_xticklabels(s.get_xticklabels(),rotation=30,fontsize=7)\n",
    "plt.title('PCA for VISp and VISpm Neurons in Cell Types Dataset')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Average Firing Rate for VISp and VISpm Units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the Dataarray da_visp created before to plot the average firing rate for each unit in VISp as a function of time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the Dataarray da_vispm created before to plot the average firing rate for each unit in VISp as a function of time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "VISp and VISpm PV+ or PV- neurons"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the Dataarray da_visp created before to plot the average firing rate for each unit in VISp as a function of time. We then compared the baseline and evoked rates and see a subset of units in VISp with a light-evoked increase in firing rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5))\n",
    "\n",
    "plt.scatter(baseline_rate_visp, evoked_rate_visp, s=15, color = 'Blue')\n",
    "\n",
    "axis_limit = 60\n",
    "plt.plot([0,axis_limit],[0,axis_limit], ':k')\n",
    "plt.plot([0,axis_limit],[0,axis_limit*2], ':r')\n",
    "plt.xlim([0,axis_limit])\n",
    "plt.ylim([0,axis_limit])\n",
    "\n",
    "plt.xlabel('Baseline rate (Hz)')\n",
    "_ = plt.ylabel('Evoked rate (Hz)')\n",
    "plt.title('VISp Units Baseline Rate vs Evoked Rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the Dataarray da_vispm created before to plot the average firing rate for each unit in VISp as a function of time. We then compared the baseline and evoked rates and see a subset of units in VISpm with a light-evoked increase in firing rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We compared the baseline and evoked rates and saw a subset of units in VISpm with a light-evoked increase in firing rate\n",
    "plt.figure(figsize=(5,5))\n",
    "\n",
    "plt.scatter(baseline_rate_vispm, evoked_rate_vispm, color = 'Blue', s=15)\n",
    "\n",
    "axis_limit = 60\n",
    "plt.plot([0,axis_limit],[0,axis_limit], ':k')\n",
    "plt.plot([0,axis_limit],[0,axis_limit*2], ':r')\n",
    "plt.xlim([0,axis_limit])\n",
    "plt.ylim([0,axis_limit])\n",
    "\n",
    "plt.xlabel('Baseline rate (Hz)')\n",
    "_ = plt.ylabel('Evoked rate (Hz)')\n",
    "\n",
    "plt.title('VISpm Baseline Rate vs Evoked Rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing Both Datasets, with data grouped by structure acronym, using a Violin plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 360x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5))\n",
    "ax = sns.catplot(x=\"ecephys_structure_acronym\", y=\"firing_rate\",\n",
    "            kind=\"violin\", data=neuropix_and_celltypes, palette=\"Set1\");\n",
    "ax.set(xlabel='Ephys Structure Acronym', ylabel='Firing Rate (Hz)', title = 'VISp vs VISpm Firing Rate from Both Datasets')\n",
    "ax.set_xticklabels(['VISpm','VISp'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the two datasets against each other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7,5))\n",
    "ax = sns.violinplot(x=\"ecephys_structure_acronym\", y=\"firing_rate\", hue=\"dataset\",\n",
    "                    data=specific_both, palette=\"Set1\")\n",
    "ax.set(xlabel='Ephys Structure Acronym', ylabel='Firing Rate (Hz)', title = 'VISp vs VISpm Firing Rate')\n",
    "ax.set_xticklabels(['VISp','VISpm'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion & Discussion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Fill in your discussion information here*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
